#+TITLE: Emacs as C++ IDE - First Step: rtags
#+URL: http://www.mycpu.org/emacs-rtags-helm/
#+AUTHOR: lujun9972
#+TAGS: raw
#+DATE: [2020年 02月 14日 星期五 12:21:59 HKT]
#+LANGUAGE:  zh-CN
#+OPTIONS:  H:6 num:nil toc:t n:nil ::t |:t ^:nil -:nil f:t *:t <:nil
多年来，我一直努力在我的Emacs上找到一个最佳的配置方案。终于，在考验了足够的耐心之后，我认为我找到了一个不太糟糕的tag配置，可以比较方便的进行代码导航。我在[[https://github.com/Andersbakken/rtags][rtags主页]]上花费了足够长的时间，甚至还观看了[[https://github.com/atilaneves/cmake-ide][著名的cmake-ide传教士的视频]]，但从未真正弄清楚如何让我的Emacs与rtags协同工作。

现在，我需要浏览一个无人例会的庞大C++代码库，事情变得愈发严重了。因此，我决定在周末仔细研究这个问题。

一开始，我希望一切都能即插即用，然后我意识到这只是一个不切实际的梦想，所以我从终端启动了rdm服务器，并且也从命令行运行了索引器（太糟糕了！）

翻译:然而，经过足够的挖掘和筛选以下链接中的信息后，我已经得到了一个无需额外配置即可工作的rtags/cmake-ide设置。我将最终结果分享在这里。我现在使用的是从源代码编译的Emacs 26.1版本。

* Demo
:PROPERTIES:
:CUSTOM_ID: demo
:END:

[[http://www.mycpu.org/images/emacs-rtags-helm.gif]]


首先在您的 =~/.emacs.d= 目录下克隆 rtags 仓库，并根据 [[https://github.com/Andersbakken/rtags][(rtags 主页)]] 提供的说明构建仓库。

#+begin_src emacs-lisp
  (require 'rtags)
  (cmake-ide-setup)
  (add-hook 'c-mode-hook 'rtags-start-process-unless-running)
  (add-hook 'c++-mode-hook 'rtags-start-process-unless-running)

  (use-package rtags
    :ensure t
    :hook (c++-mode . rtags-start-process-unless-running)
    :config (setq rtags-completions-enabled t
                  rtags-path "/home/manoj/.emacs.d/rtags/src/rtags.el"
                  rtags-rc-binary-name "/home/manoj/.emacs.d/rtags/bin/rc"
                  rtags-use-helm t
                  rtags-rdm-binary-name "/home/manoj/.emacs.d/rtags/bin/rdm")
    :bind (("C-c E" . rtags-find-symbol)
           ("C-c e" . rtags-find-symbol-at-point)
           ("C-c O" . rtags-find-references)
           ("C-c o" . rtags-find-references-at-point)
           ("C-c s" . rtags-find-file)
           ("C-c v" . rtags-find-virtuals-at-point)
           ("C-c F" . rtags-fixit)
           ("C-c f" . rtags-location-stack-forward)
           ("C-c b" . rtags-location-stack-back)
           ("C-c n" . rtags-next-match)
           ("C-c p" . rtags-previous-match)
           ("C-c P" . rtags-preprocess-file)
           ("C-c R" . rtags-rename-symbol)
           ("C-c x" . rtags-show-rtags-buffer)
           ("C-c T" . rtags-print-symbol-info)
           ("C-c t" . rtags-symbol-type)
           ("C-c I" . rtags-include-file)
           ("C-c i" . rtags-get-include-file-for-symbol)))

  (setq rtags-display-result-backend 'helm)
#+end_src

** Source:
:PROPERTIES:
:CUSTOM_ID: source
:END:

- http://xenodium.com/all/
- https://github.com/philippe-grenet/exordium#rtags
- http://martinsosic.com/development/emacs/2017/12/09/emacs-cpp-ide.html#rtags
- https://vxlabs.com/2016/04/11/step-by-step-guide-to-c-navigation-and-completion-with-emacs-and-the-clang-based-rtags/
- https://github.com/emacs-helm/helm/wiki
- https://nilsdeppe.com/posts/emacs-c++-ide
- https://github.com/hlissner/doom-emacs/issues/1579
- https://manpages.debian.org/jessie/systemd/systemd.unit.5.en.html

新年快乐！希望在2020年能更常见到你！
